{"version":3,"sources":["app.module.css","components/GettingStarted.js","components/RulesEditor.js","utilities.js","components/StockChart.js","appSlice.js","App.js","store.js","reportWebVitals.js","index.js"],"names":["module","exports","GettingStarted","props","stocks","length","className","href","target","rel","find","s","sector","summaryScore","foundSearchCriteriaData","foundBasicData","RulesEditor","useForm","mode","register","handleSubmit","onSubmit","values","scoringRules","dividendPayoutPercentage","highValueBetter","dividendPayoutPercentageHighValueBetter","min","Number","dividendPayoutPercentageMin","max","dividendPayoutPercentageMax","weight","dividendPayoutPercentageWeight","dividendYieldPercentage","dividendYieldPercentageHighValueBetter","dividendYieldPercentageMin","dividendYieldPercentageMax","dividendYieldPercentageWeight","industryPercentage","industryPercentageHighValueBetter","industryPercentageMin","industryPercentageMax","industryPercentageWeight","overallScore","overallScoreMin","overallScoreMax","priceEarningsRatio","priceEarningsRatioHighValueBetter","priceEarningsRatioMin","priceEarningsRatioMax","priceEarningsRatioWeight","sectorPercentage","sectorPercentageHighValueBetter","sectorPercentageMin","sectorPercentageMax","sectorPercentageWeight","stockPercentage","stockPercentageHighValueBetter","stockPercentageMin","stockPercentageMax","stockPercentageWeight","summaryScoreWeight","id","disabled","defaultValue","name","type","required","step","ref","value","onClick","onClose","utilities","filter","inputObjectArray","searchString","searchStringLower","toLowerCase","o","property","indexOf","guid","replace","c","r","Math","random","toString","isDate","call","test","jsonParseNumbers","inputObject","JSON","parse","k","v","isNaN","sort","propertyName","descending","a","b","aValue","bValue","Date","StockChart","useState","descendingSort","setDecendingSort","getScore","rule","score","handleSort","portfolio","onRules","map","stock","index","getSummaryScore","priceEarningsRatioScore","dividendPayoutPercentageScore","dividendYieldPercentageScore","stockPercentageScore","sectorPercentageScore","industryPercentageScore","earningsPerShare","symbol","description","industry","lastPrice","toFixed","quantity","dividendPerShare","costBasis","currentValue","initialPortfolio","portfolioJson","localStorage","getItem","sectors","initialScoringRules","scoringRulesJson","appSlice","createSlice","initialState","reducers","updatePortfolio","state","action","payload","setItem","stringify","updateScoringRules","actions","selectorPortfolio","app","selectorScoringRules","App","showRules","setShowRules","toast","configure","forcePrecision","num","precision","getStockScore","dispatch","useDispatch","useSelector","css","onChange","event","files","file","textReader","FileReader","binaryStringReader","onloadend","rows","i","columns","str","elements","split","newElements","indexOfRightQuotes","tmp","j","push","splitCSVButIgnoreCommasInDoublequotes","newStock","existingStock","success","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","processPortfolioOverview","result","onload","workbook","cloneDeep","XLSX","utils","sheet_to_row_object_array","Sheets","row","industries","warn","processScreener","read","readAsText","readAsBinaryString","error","multiple","accept","hidden","csv","blob","Blob","URL","createObjectURL","link","document","createElement","download","body","appendChild","click","removeChild","handleOnUpdateRules","configureStore","reducer","appReducer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","store","getElementById"],"mappings":"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","file":"static/js/main.2ce54034.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"app_app__3Pene\"};","import React from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nimport './GettingStarted.css'\r\n\r\nconst GettingStarted = (props) => {\r\n    if(props.stocks.length === 0) {\r\n        return (\r\n            <div className=\"getting-started\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-heading bg-dark text-light p-2\">\r\n                        Step 1\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                        From Fidelity's website, <a href=\"https://oltx.fidelity.com/ftgw/fbc/oftop/portfolio#positions\" target=\"_blank\" rel=\"noreferrer\">download your Profile's Positions</a> \"Overview\" data and import it into this application.\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    } else {\r\n        // Do we have any Screen data?\r\n        let found = props.stocks.find(s => s.sector || s.summaryScore) // Look for any stock with sector information (Basic Facts) or summaryScore (Search Criteria) data\r\n        if(!found) {\r\n            return (\r\n                <div className=\"getting-started\">\r\n                    <div className=\"card\">\r\n                        <div className=\"card-heading bg-dark text-light d-flex p-2\">\r\n                            Step 2\r\n                        </div>\r\n                        <div className=\"card-body\">\r\n                            <ol>\r\n                                <li>From Fidelity's website <a href=\"https://research2.fidelity.com/fidelity/screeners/commonstock/landing.asp?\" target=\"_blank\" rel=\"noreferrer\">load existing or create a new \"Screen\"</a> with the following criteria</li>\r\n                                <ul>\r\n                                    <li><b>\"Company Value - P/E - Price/TTM Earnings\"</b> choosing all categories \"Very Low\" through \"Very High\"</li>\r\n                                    <li><b>\"Analyst Opinions - Equity Summary Score from StarMine from Fefinitiv\"</b> choosing all categories \"Very Bearish\" through \"Very Bullish\"</li>\r\n                                    <li><b>\"Basic Company Facts / Index\"</b> choosing all 3 indexes \"DJIA\", \"NASDAQ 100\" and \"S&P 500\"</li>\r\n                                </ul>\r\n                                <li>Optionally, add up to 5 stocks manually that may not have been returned from the search results</li>\r\n                                <li>Select \"Save to My Screens\" for later reuse</li>\r\n                                <li>Download the Screen's \"Search Criteria\" and \"Basic Facts\" data</li>\r\n                                <li>Import the Screen file into this application.  This data will merge together with your portfolio data</li>\r\n                            </ol>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } else {\r\n            // Do we have both Screen data files already imported?\r\n            let foundSearchCriteriaData = props.stocks.find(s => s.summaryScore)            \r\n            let foundBasicData = props.stocks.find(s => s.sector)\r\n            if(!foundSearchCriteriaData) {\r\n                return (\r\n                    <div className=\"getting-started\">\r\n                        <div className=\"card\">\r\n                            <div className=\"card-heading bg-dark text-light d-flex p-2\">\r\n                                Step 3\r\n                            </div>\r\n                            <div className=\"card-body\">\r\n                                Import the saved screen's <b>\"Search Criteria\"</b> data file.  This data will merge together with your portfolio data\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } else if(!foundBasicData) {\r\n                return (\r\n                    <div className=\"getting-started\">\r\n                        <div className=\"card\">\r\n                            <div className=\"card-heading bg-dark text-light d-flex p-2\">\r\n                                Step 3\r\n                            </div>\r\n                            <div className=\"card-body\">\r\n                                Import the saved screen's <b>\"Basic Facts\"</b> data file.  This data will merge together with your portfolio data\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } else {\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default GettingStarted;\r\n","import React from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nimport './RulesEditor.css'\r\n\r\nconst RulesEditor = (props) => {\r\n\r\n    const { register, handleSubmit } = useForm({ mode: 'onBlur' });\r\n\r\n    const handleFormSubmit = (values) => {\r\n        // Values are the actual form fields that use ref={register()}\r\n        const scoringRules = {\r\n            dividendPayoutPercentage: { highValueBetter: values.dividendPayoutPercentageHighValueBetter === 'true', min: Number(values.dividendPayoutPercentageMin), max: Number(values.dividendPayoutPercentageMax), weight: Number(values.dividendPayoutPercentageWeight) },\r\n            dividendYieldPercentage: { highValueBetter: values.dividendYieldPercentageHighValueBetter === 'true', min: Number(values.dividendYieldPercentageMin), max: Number(values.dividendYieldPercentageMax), weight: Number(values.dividendYieldPercentageWeight) },\r\n            industryPercentage: { highValueBetter: values.industryPercentageHighValueBetter === 'true', min: Number(values.industryPercentageMin), max: Number(values.industryPercentageMax), weight: Number(values.industryPercentageWeight) },\r\n            overallScore: { highValueBetter: true, min: Number(values.overallScoreMin), max: Number(values.overallScoreMax) }, // Summation of all the other scores with min/max used only for highlighting chart\r\n            priceEarningsRatio: { highValueBetter: values.priceEarningsRatioHighValueBetter === 'true', min: Number(values.priceEarningsRatioMin), max: Number(values.priceEarningsRatioMax), weight: Number(values.priceEarningsRatioWeight) },\r\n            sectorPercentage: { highValueBetter: values.sectorPercentageHighValueBetter === 'true', min: Number(values.sectorPercentageMin), max: Number(values.sectorPercentageMax), weight: Number(values.sectorPercentageWeight) },\r\n            stockPercentage: { highValueBetter: values.stockPercentageHighValueBetter === 'true', min: Number(values.stockPercentageMin), max: Number(values.stockPercentageMax), weight: Number(values.stockPercentageWeight) },\r\n            summaryScore: { weight: Number(values.summaryScoreWeight) } // Neutral will be 0 and each rating above adds 'weight' and below subtracts 'weight'\r\n        }\r\n        props.onSubmit(scoringRules);\r\n    }\r\n\r\n    return (\r\n        <div className=\"rules-editor\">\r\n            <div className=\"card\">\r\n                <div className=\"card-heading bg-dark text-light d-flex p-2\">\r\n                    Rules Editor\r\n                </div>\r\n                <div className=\"card-body\">\r\n                    The stock portfolio table will highlight cells below the minimum or above the maximum values entered here, scoring them based on the weight given. Direction impacts the score as follows:<br/>\r\n                    <br/>\r\n                    <b>High</b>\r\n                    <ul>\r\n                        <li>Weight added to score when value &gt; Max</li>\r\n                        <li>Weight removed from score when value &lt; Min</li>\r\n                    </ul>\r\n                    <b>Low</b>\r\n                    <ul>\r\n                        <li>Weight added to score when value &lt; Min</li>\r\n                        <li>Weight removed from score when value &gt; Max</li>\r\n                    </ul>                  \r\n                    <br/>\r\n                    <form onSubmit={handleSubmit(handleFormSubmit)}>\r\n                        <table id=\"stockTable\" className=\"table table-condensed table-striped table-hover font-size-small\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th className=\"name-column\">Rule Name</th>\r\n                                    <th>Min</th>\r\n                                    <th>Max</th>\r\n                                    <th>Direction</th>\r\n                                    <th>Weight</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td>Summary Score</td>\r\n                                    <td><input className=\"form-control\" disabled defaultValue=\"N/A\"/></td>\r\n                                    <td><input className=\"form-control\" disabled defaultValue=\"N/A\"/></td>\r\n                                    <td><input className=\"form-control\" disabled defaultValue=\"N/A\"/></td>\r\n                                    <td>\r\n                                        <input className=\"form-control\" name=\"summaryScoreWeight\" type=\"number\" defaultValue={props.scoringRules.summaryScore.weight} min=\"0\" max=\"100\" required step=\"1\" ref={register()}/>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Price / Earnings Ratio (P/E)</td>\r\n                                    <td><input className=\"form-control\" name=\"priceEarningsRatioMin\" type=\"number\" defaultValue={props.scoringRules.priceEarningsRatio.min} min=\"1\" max=\"100\" required step=\"0.1\" ref={register()}/></td>\r\n                                    <td><input className=\"form-control\" name=\"priceEarningsRatioMax\" type=\"number\" defaultValue={props.scoringRules.priceEarningsRatio.max} min=\"1\" max=\"100\" required step=\"0.1\" ref={register()}/></td>\r\n                                    <td>\r\n                                        <select className=\"form-control\" name=\"priceEarningsRatioHighValueBetter\" defaultValue={props.scoringRules.priceEarningsRatio.highValueBetter} ref={register()}>\r\n                                            <option value='true'>High</option>\r\n                                            <option value='false'>Low</option>\r\n                                        </select>\r\n                                    </td>\r\n                                    <td><input className=\"form-control\" name=\"priceEarningsRatioWeight\" type=\"number\" defaultValue={props.scoringRules.priceEarningsRatio.weight} min=\"0\" max=\"100\" required step=\"1\" ref={register()}/></td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Dividend Payout Percentage</td>\r\n                                    <td><input className=\"form-control\" name=\"dividendPayoutPercentageMin\" type=\"number\" defaultValue={props.scoringRules.dividendPayoutPercentage.min} min=\"0.01\" max=\"1\" required step=\"0.01\" ref={register()}/></td>\r\n                                    <td><input className=\"form-control\" name=\"dividendPayoutPercentageMax\" type=\"number\" defaultValue={props.scoringRules.dividendPayoutPercentage.max} min=\"0.01\" max=\"1\" required step=\"0.01\" ref={register()}/></td>\r\n                                    <td>\r\n                                        <select className=\"form-control\" name=\"dividendPayoutPercentageHighValueBetter\" defaultValue={props.scoringRules.dividendPayoutPercentage.highValueBetter} ref={register()}>\r\n                                            <option value='true'>High</option>\r\n                                            <option value='false'>Low</option>\r\n                                        </select>\r\n                                    </td>\r\n                                    <td><input className=\"form-control\" name=\"dividendPayoutPercentageWeight\" type=\"number\" defaultValue={props.scoringRules.dividendPayoutPercentage.weight} min=\"0\" max=\"100\" required step=\"1\" ref={register()}/></td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Dividend Yield Percentage</td>\r\n                                    <td><input className=\"form-control\" name=\"dividendYieldPercentageMin\" type=\"number\" defaultValue={props.scoringRules.dividendYieldPercentage.min} min=\"0.001\" max=\"1\" required step=\"0.001\" ref={register()}/></td>\r\n                                    <td><input className=\"form-control\" name=\"dividendYieldPercentageMax\" type=\"number\" defaultValue={props.scoringRules.dividendYieldPercentage.max} min=\"0.001\" max=\"1\" required step=\"0.001\" ref={register()}/></td>\r\n                                    <td>\r\n                                        <select className=\"form-control\" name=\"dividendYieldPercentageHighValueBetter\" defaultValue={props.scoringRules.dividendYieldPercentage.highValueBetter} ref={register()}>\r\n                                            <option value='true'>High</option>\r\n                                            <option value='false'>Low</option>\r\n                                        </select>\r\n                                    </td>\r\n                                    <td><input className=\"form-control\" name=\"dividendYieldPercentageWeight\" type=\"number\" defaultValue={props.scoringRules.dividendYieldPercentage.weight} min=\"0\" max=\"100\" required step=\"1\" ref={register()}/></td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Stock Percentage</td>\r\n                                    <td><input className=\"form-control\" name=\"stockPercentageMin\" type=\"number\" defaultValue={props.scoringRules.stockPercentage.min} min=\"0.001\" max=\"1\" required step=\"0.001\" ref={register()}/></td>\r\n                                    <td><input className=\"form-control\" name=\"stockPercentageMax\" type=\"number\" defaultValue={props.scoringRules.stockPercentage.max} min=\"0.001\" max=\"1\" required step=\"0.001\" ref={register()}/></td>\r\n                                    <td>\r\n                                        <select className=\"form-control\" name=\"stockPercentageHighValueBetter\" defaultValue={props.scoringRules.stockPercentage.highValueBetter} ref={register()}>\r\n                                            <option value='true'>High</option>\r\n                                            <option value='false'>Low</option>\r\n                                        </select>\r\n                                    </td>\r\n                                    <td><input className=\"form-control\" name=\"stockPercentageWeight\" type=\"number\" defaultValue={props.scoringRules.stockPercentage.weight} min=\"0\" max=\"100\" required step=\"1\" ref={register()}/></td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Sector Percentage</td>\r\n                                    <td><input className=\"form-control\" name=\"sectorPercentageMin\" type=\"number\" defaultValue={props.scoringRules.sectorPercentage.min} min=\"0.01\" max=\"1\" required step=\"0.01\" ref={register()}/></td>\r\n                                    <td><input className=\"form-control\" name=\"sectorPercentageMax\" type=\"number\" defaultValue={props.scoringRules.sectorPercentage.max} min=\"0.01\" max=\"1\" required step=\"0.01\" ref={register()}/></td>\r\n                                    <td>\r\n                                        <select className=\"form-control\" name=\"sectorPercentageHighValueBetter\" defaultValue={props.scoringRules.sectorPercentage.highValueBetter} ref={register()}>\r\n                                            <option value='true'>High</option>\r\n                                            <option value='false'>Low</option>\r\n                                        </select>\r\n                                    </td>\r\n                                    <td><input className=\"form-control\" name=\"sectorPercentageWeight\" type=\"number\" defaultValue={props.scoringRules.sectorPercentage.weight} min=\"0\" max=\"100\" required step=\"1\" ref={register()}/></td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Industry Percentage</td>\r\n                                    <td><input className=\"form-control\" name=\"industryPercentageMin\" type=\"number\" defaultValue={props.scoringRules.industryPercentage.min} min=\"0.001\" max=\"1\" required step=\"0.001\" ref={register()}/></td>\r\n                                    <td><input className=\"form-control\" name=\"industryPercentageMax\" type=\"number\" defaultValue={props.scoringRules.industryPercentage.max} min=\"0.001\" max=\"1\" required step=\"0.001\" ref={register()}/></td>\r\n                                    <td>\r\n                                        <select className=\"form-control\" name=\"industryPercentageHighValueBetter\" defaultValue={props.scoringRules.industryPercentage.highValueBetter} ref={register()}>\r\n                                            <option value='true'>High</option>\r\n                                            <option value='false'>Low</option>\r\n                                        </select>\r\n                                    </td>\r\n                                    <td><input className=\"form-control\" name=\"industryPercentageWeight\" type=\"number\" defaultValue={props.scoringRules.industryPercentage.weight} min=\"0\" max=\"100\" required step=\"1\" ref={register()}/></td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Overall Score</td>\r\n                                    <td><input className=\"form-control\" name=\"overallScoreMin\" type=\"number\" defaultValue={props.scoringRules.overallScore.min} min=\"0\" max=\"100\" required step=\"1\" ref={register()}/></td>\r\n                                    <td><input className=\"form-control\" name=\"overallScoreMax\" type=\"number\" defaultValue={props.scoringRules.overallScore.max} min=\"0\" max=\"100\" required step=\"1\" ref={register()}/></td>\r\n                                    <td><input className=\"form-control\" disabled defaultValue=\"N/A\"/></td>\r\n                                    <td><input className=\"form-control\" disabled defaultValue=\"N/A\"/></td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                        <div className=\"form-buttons\">\r\n                            <button className=\"btn btn-success\" type=\"submit\"><span className=\"fa fa-check\"></span> Save</button>&nbsp;\r\n                            <button className=\"btn btn-warning\" onClick={props.onClose}> Cancel</button>&nbsp;\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RulesEditor;\r\n","export let utilities = {\r\n    filter: (inputObjectArray, searchString) => {\r\n        // Filters any objects from the array where any of their properties contain the passed in search string\r\n        if (inputObjectArray != null && searchString != null && searchString.length > 0) {\r\n            const searchStringLower = searchString.toLowerCase();\r\n            return inputObjectArray.filter(o => {\r\n                for (const property in o) { // Look at each property\r\n                    if (typeof o[property] === 'string') {\r\n                        if (o[property].toLowerCase().indexOf(searchStringLower) !== -1) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                }\r\n                return false;\r\n            });\r\n        } else {\r\n            return inputObjectArray;\r\n        }\r\n    },\r\n    guid: () => {\r\n\t\treturn 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n            // eslint-disable-next-line\r\n\t\t\tconst r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);\r\n\t\t\treturn v.toString(16);\r\n\t\t});\r\n\t},\r\n    isDate: (value) => {\r\n        if(!value) {\r\n            return false;\r\n        }\r\n        var dateFormat;\r\n        if (toString.call(value) === '[object Date]') {\r\n            return true;\r\n        }\r\n        if (typeof value.replace === 'function') {\r\n            value.replace(/^\\s+|\\s+$/gm, '');\r\n        }\r\n        dateFormat = /(^\\d{1,4}[.|\\\\/|-]\\d{1,2}[.|\\\\/|-]\\d{1,4})(\\s*(?:0?[1-9]:[0-5]|1(?=[012])\\d:[0-5])\\d\\s*[ap]m)?$/;\r\n        return dateFormat.test(value);\r\n    },\r\n    jsonParseNumbers: (inputObject) => {\r\n        return JSON.parse(inputObject, (k, v) => {\r\n            if(typeof v === \"object\") {\r\n                return v;\r\n            } else {\r\n                return isNaN(v) ? v : Number(v);\r\n            }\r\n        });\r\n    },\r\n    sort: (inputObjectArray, propertyName, descending = false) => {\r\n        // Sort an array of objects (in place) by the value of a given propertyName either ascending (default) or descending\r\n        if (inputObjectArray && propertyName) {\r\n            inputObjectArray.sort((a, b) => {\r\n                let aValue = a[propertyName];\r\n                let bValue = b[propertyName];\r\n                // Check if strings are actually dates\r\n                if(utilities.isDate(aValue) && utilities.isDate(bValue)) {\r\n                    aValue = new Date(a[propertyName]);\r\n                    bValue = new Date(b[propertyName]);\r\n                }\r\n                if (aValue < bValue) {\r\n                    return descending ? 1 : -1;\r\n                }\r\n                if (bValue < aValue) {\r\n                    return descending ? -1 : 1;\r\n                }\r\n                return 0;\r\n            });\r\n        }\r\n    }\r\n}\r\n","import React, {useState} from 'react';\r\nimport { utilities } from './../utilities';\r\n\r\nimport './StockChart.css'\r\n\r\nconst StockChart = (props) => {\r\n\r\n    let [descendingSort, setDecendingSort] = useState(true);\r\n\r\n    const getScore = (value, rule) => {\r\n        let score = 0;\r\n        if(value) {\r\n            if (value > rule.max) {\r\n                if (rule.highValueBetter) {\r\n                    score = rule.weight;\r\n                } else {\r\n                    score = -rule.weight;\r\n                }\r\n            } else if (value < rule.min) {\r\n                if (rule.highValueBetter) {\r\n                    score = -rule.weight;\r\n                } else {\r\n                    score = rule.weight;\r\n                }\r\n            }\r\n        }\r\n        return score;\r\n    }\r\n\r\n    const getSummaryScore = (stock) => {\r\n        let score = 0;\r\n        const weight = props.scoringRules.summaryScore.weight\r\n        switch (stock.summaryScore) {\r\n            case 'Very Bullish':\r\n                score += (weight*2)\r\n                break;\r\n            case 'Bullish':\r\n                score += weight\r\n                break;\r\n            case 'Bearish':\r\n                score -= weight\r\n                break;\r\n            case 'Very Bearish':\r\n                score -= (weight*2)\r\n                break;\r\n            default: // 'Neutral'\r\n        }\r\n        return score;\r\n    }\r\n    \r\n    const handleSort = (propertyName) => {\r\n        setDecendingSort(!descendingSort);\r\n        utilities.sort(props.portfolio.stocks, propertyName, descendingSort);\r\n    }\r\n\r\n    return (\r\n        <div className=\"stock-chart\">\r\n            <div className=\"card\" id=\"chart\">\r\n                <div className=\"card-heading bg-dark text-light\">\r\n                    <button className='btn btn-secondary btn-rules' onClick={props.onRules}> Rules</button>\r\n                    <span>Stock Portfolio</span>\r\n                </div>\r\n                <div className=\"card-body\">\r\n                    <div className=\"table-responsive\">\r\n                        <table id=\"stockTable\" className=\"table table-condensed table-striped table-hover font-size-small\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th onClick={() => handleSort('symbol')}>Symbol</th>\r\n                                    <th onClick={() => handleSort('score')}>Score</th>\r\n                                    <th onClick={() => handleSort('description')}>Description</th>\r\n                                    <th onClick={() => handleSort('sector')}>Sector</th>\r\n                                    <th onClick={() => handleSort('industry')}>Industry</th>\r\n                                    <th onClick={() => handleSort('lastPrice')}>Last Price</th>\r\n                                    <th onClick={() => handleSort('quantity')}>Quantity</th>\r\n                                    <th onClick={() => handleSort('earningsPerShare')}>EPS</th>\r\n                                    <th onClick={() => handleSort('dividendPerShare')}>Dividend</th>\r\n                                    <th onClick={() => handleSort('costBasis')}>Cost Basis</th>\r\n                                    <th onClick={() => handleSort('currentValue')}>Current Value</th>\r\n                                    <th onClick={() => handleSort('summaryScore')}>Summary Score</th>\r\n                                    <th onClick={() => handleSort('priceEarningsRatio')}>P/E</th>\r\n                                    <th onClick={() => handleSort('dividendPayoutPercentage')}>Div Payout %</th>\r\n                                    <th onClick={() => handleSort('dividendYieldPercentage')}>Div Yield %</th>\r\n                                    <th onClick={() => handleSort('stockPercentage')}>Stock %</th>\r\n                                    <th onClick={() => handleSort('sectorPercentage')}>Sector %</th>\r\n                                    <th onClick={() => handleSort('industryPercentage')}>Industry %</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {props.portfolio.stocks.map((stock, index) => {\r\n                                    const summaryScore = getSummaryScore(stock);\r\n                                    const priceEarningsRatioScore = getScore(stock.priceEarningsRatio, props.scoringRules.priceEarningsRatio);\r\n                                    const dividendPayoutPercentageScore = getScore(stock.dividendPayoutPercentage, props.scoringRules.dividendPayoutPercentage);\r\n                                    const dividendYieldPercentageScore = getScore(stock.dividendYieldPercentage, props.scoringRules.dividendYieldPercentage);\r\n                                    const stockPercentageScore = getScore(stock.stockPercentage, props.scoringRules.stockPercentage);\r\n                                    const sectorPercentageScore = getScore(stock.sectorPercentage, props.scoringRules.sectorPercentage);\r\n                                    const industryPercentageScore = getScore(stock.industryPercentage, props.scoringRules.industryPercentage);\r\n                                    let score = 0\r\n                                    // Do not get an overall score unless we have earningsPerShare, as it is needed to calculate many of the important metrics\r\n                                    if(stock.earningsPerShare) {\r\n                                        score = summaryScore+priceEarningsRatioScore+dividendPayoutPercentageScore+dividendYieldPercentageScore+stockPercentageScore+sectorPercentageScore+industryPercentageScore;\r\n                                    }\r\n                                    return (\r\n                                        <tr key={index}>\r\n                                            <td>{stock.symbol}</td>\r\n                                            <td className={score > props.scoringRules.overallScore.max ? 'good-background' : score < props.scoringRules.overallScore.min ? 'bad-background' : null}>{score}</td>\r\n                                            <td>{stock.description}</td>\r\n                                            <td>{stock.sector ? stock.sector.replace(/[\"]/g, '') : null}</td>\r\n                                            <td>{stock.industry ? stock.industry.replace(/[\"]/g, '') : null}</td>\r\n                                            <td>${stock.lastPrice.toFixed(2)}</td>\r\n                                            <td>{stock.quantity}</td>\r\n                                            <td>{stock.earningsPerShare ? `$${stock.earningsPerShare.toFixed(2)}` : null}</td>\r\n                                            <td>{stock.dividendPerShare ? `$${stock.dividendPerShare.toFixed(2)}` : null}</td>\r\n                                            <td>{stock.costBasis ? `$${stock.costBasis.toFixed(2)}` : null}</td>\r\n                                            <td className={stock.currentValue < stock.costBasis ? 'bad-text' : null}>{stock.currentValue ? `$${stock.currentValue.toFixed(2)}` : null}</td>\r\n                                            <td className={summaryScore > 0 ? 'good-background' : summaryScore < 0  ? 'bad-background' : null}>{stock.summaryScore}</td>\r\n                                            <td className={priceEarningsRatioScore > 0 ? 'good-background' : priceEarningsRatioScore < 0  ? 'bad-background' : null}>{stock.priceEarningsRatio ? stock.priceEarningsRatio.toFixed(2) : null}</td>\r\n                                            <td className={dividendPayoutPercentageScore > 0 ? 'good-background' : dividendPayoutPercentageScore < 0 ? 'bad-background' : null}>{stock.dividendPayoutPercentage ? (stock.dividendPayoutPercentage*100).toFixed(0) : null}</td>\r\n                                            <td className={dividendYieldPercentageScore > 0 ? 'good-background' : dividendYieldPercentageScore < 0 ? 'bad-background' : null}>{stock.dividendYieldPercentage ? (stock.dividendYieldPercentage*100).toFixed(2) : null}</td>\r\n                                            <td className={stockPercentageScore > 0 ? 'good-background' : stockPercentageScore < 0  ? 'bad-background' : null}>{stock.stockPercentage ? (stock.stockPercentage*100).toFixed(2) : null}</td>\r\n                                            <td className={sectorPercentageScore > 0 ? 'good-background' : sectorPercentageScore < 0  ? 'bad-background' : null}>{stock.sectorPercentage ? (stock.sectorPercentage*100).toFixed(2) : null}</td>\r\n                                            <td className={industryPercentageScore > 0 ? 'good-background' : industryPercentageScore < 0  ? 'bad-background' : null}>{stock.industryPercentage ? (stock.industryPercentage*100).toFixed(2) : null}</td>\r\n                                        </tr>\r\n                                    )\r\n                                })}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n                <div className=\"card-footer d-flex p-2 justify-content-around\">\r\n                    <span className=\"bad-text\">Orange denotes a negative score</span>\r\n                    <span className=\"good-text\">Blue denotes a positive score</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default StockChart;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\nimport { utilities } from './utilities';\r\n\r\n/*\r\nportfolio = {\r\n    currentValue: number,\r\n    sectors: [\r\n        {\r\n            name: string,\r\n            currentValue: number,\r\n            industries: [\r\n                {\r\n                    name: string,\r\n                    currentValue: number\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    stocks: [\r\n        {\r\n            costBasis: number,\r\n            currentValue: number,\r\n            description: string\r\n            dividendPerShare: number,\r\n            dividendRatio: number,\r\n            dividendYieldPercent: number,\r\n            earningsPerShare: number,\r\n            industry: string,\r\n            industryPercentage: number,\r\n            lastPrice: number,\r\n            priceEarningsRatio: number,\r\n            quantity: number,\r\n            score: number,\r\n            sector: string,\r\n            sectorPercentage: number,\r\n            stockPercentage: number,\r\n            summaryScore: string,\r\n            symbol: string\r\n        }\r\n    ]\r\n},\r\nscoringRules: {\r\n    dividendPayoutPercentage: { highValueBetter: boolean, min: number, max: number, weight: number },\r\n    dividendYieldPercentage { highValueBetter: boolean, min: number, max: number, weight: number },\r\n    industryPercentage: { highValueBetter: boolean, min: number, max: number, weight: number },\r\n    priceEarningsRatio: { highValueBetter: boolean, min: number, max: number, weight: number },\r\n    sectorPercentage: { highValueBetter: boolean, min: number, max: number, weight: number },\r\n    stockPercentage: { highValueBetter: boolean, min: number, max: number, weight: number },\r\n    summaryScore: { weight: number }, // Neutral will be 0 and each rating above adds 'weight' and below subtracts 'weight'\r\n}\r\n*/\r\n\r\n// Get initialState\r\nlet initialPortfolio = null;\r\nconst portfolioJson = localStorage.getItem('portfolio');\r\nif(portfolioJson) {\r\n    initialPortfolio = utilities.jsonParseNumbers(portfolioJson);\r\n} else {\r\n    initialPortfolio = {\r\n        currentValue: 0,\r\n        sectors: [],\r\n        stocks: []\r\n    };\r\n}\r\n\r\nlet initialScoringRules = null;\r\nconst scoringRulesJson = localStorage.getItem('scoringRules');\r\nif(scoringRulesJson) {\r\n    initialScoringRules = utilities.jsonParseNumbers(scoringRulesJson);\r\n} else {\r\n    initialScoringRules = {\r\n        dividendPayoutPercentage: { highValueBetter: false, min: 0.35, max: 0.6, weight: 2 },\r\n        dividendYieldPercentage: { highValueBetter: true, min: 0.015, max: 0.025, weight: 1 },\r\n        industryPercentage: { highValueBetter: false, min: 0.002, max: 0.008, weight: 1 },\r\n        overallScore: { highValueBetter: true, min: 0, max: 3 }, // Summation of all the other scores with min/max used only for highlighting chart\r\n        priceEarningsRatio: { highValueBetter: false, min: 16, max: 25, weight: 2 },\r\n        sectorPercentage: { highValueBetter: false, min: 0.02, max: 0.04, weight: 1 },\r\n        stockPercentage: { highValueBetter: false, min: 0.002, max: 0.005, weight: 1 },\r\n        summaryScore: { weight: 1 } // Neutral will be 0 and each rating above adds 'weight' and below subtracts 'weight'\r\n    };\r\n}\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////////\r\n// Use createAsyncThunk() if adding any async side effects to a reducer\r\n// https://redux-toolkit.js.org/api/createAsyncThunk\r\n////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\nexport const appSlice = createSlice({\r\n  name: 'app',\r\n  initialState: {\r\n    portfolio: initialPortfolio,\r\n    scoringRules: initialScoringRules\r\n  },\r\n  reducers: {\r\n    // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n    // doesn't actually mutate the state because it uses the Inner library,\r\n    // which detects changes to a \"draft state\" and produces a brand new\r\n    // immutable state based off those changes\r\n    updatePortfolio: (state, action) => {\r\n        // action must pass portfolio\r\n        state.portfolio = action.payload;\r\n        localStorage.setItem('portfolio', JSON.stringify(state.portfolio));\r\n    },\r\n    updateScoringRules: (state, action) => {\r\n        // action must pass scoringRules\r\n        state.scoringRules = action.payload;\r\n        localStorage.setItem('scoringRules', JSON.stringify(state.scoringRules));\r\n    },\r\n\r\n    // deleteStock: (state, action) => {\r\n    //     // action must pass stock\r\n    //     let stock = action.payload;\r\n    //     const stockIndex = state.portfolio.stocks.findIndex((s) => s.symbol===stock.symbol);\r\n    //     if(stockIndex !== -1) {                    \r\n    //         state.portfolio.stocks = state.portfolio.stocks.splice(stockIndex, 1);\r\n    //         localStorage.setItem('portfolio', JSON.stringify(state.portfolio));\r\n    //     }\r\n    // },\r\n    // insertStock: (state, action) => {\r\n    //     // action must pass stock\r\n    //     let stock = action.payload;\r\n    //     state.portfolio.stocks.push(stock);\r\n    //     utilities.sort(state.portfolio.stocks, 'symbol');\r\n    //     localStorage.setItem('portfolio', JSON.stringify(state.portfolio));\r\n    // },\r\n    // updateStock: (state, action) => {\r\n    //     // action must pass stock\r\n    //     let stock = action.payload;\r\n    //     const stockIndex = state.portfolio.stocks.findIndex((s) => s.symbol===stock.symbol);\r\n    //     if(stockIndex !== -1) {\r\n    //         state.portfolio.stocks[stockIndex] = stock;\r\n    //         localStorage.setItem('portfolio', JSON.stringify(state.portfolio));\r\n    //     }\r\n    // }\r\n  }\r\n});\r\n\r\nexport const {\r\n    updatePortfolio,\r\n    updateScoringRules\r\n    // deleteStock,\r\n    // insertStock,\r\n    // updateStock\r\n } = appSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\n// export const incrementAsync = amount => dispatch => {\r\n//   setTimeout(() => {\r\n//     dispatch(incrementByAmount(amount));\r\n//   }, 1000);\r\n// };\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectorPortfolio = state => state.app.portfolio;\r\nexport const selectorScoringRules = state => state.app.scoringRules;\r\n\r\nexport default appSlice.reducer;\r\n","import React, {useState} from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { cloneDeep } from 'lodash'\nimport { toast } from 'react-toastify' // Must be initialized in App.js (see https://github.com/fkhadra/react-toastify#usage)\nimport XLSX from 'xlsx';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport css from './app.module.css';\n\nimport GettingStarted from './components/GettingStarted';\nimport RulesEditor from './components/RulesEditor';\nimport StockChart from './components/StockChart';\n\nimport {\n    // Actions\n    updatePortfolio,\n    updateScoringRules,\n    // Selectors\n    selectorPortfolio,\n    selectorScoringRules\n} from './appSlice';\n\nconst App = () => {\n    let [showRules, setShowRules] = useState(false);\n\n    // Call it once in your app. At the root of your app is the best place\n    toast.configure();\n\n    const forcePrecision = (num, precision = 2) => num ? num.toFixed(precision) : '';\n\n    const getScore = (value, rule) => {\n        if(value) {\n            if (value > rule.max) {\n                if (rule.highValueBetter)\n                    return rule.weight;\n                return -rule.weight;\n            } else if (value < rule.min) {\n                if (rule.highValueBetter)\n                    return -rule.weight;\n                return rule.weight;\n            }\n        }\n        return 0;\n    }\n\n    const getStockScore = (stock) => {\n        let score = 0;\n        // Do not get an overall score unless we have earningsPerShare, as it is needed to calculate many of the important metrics\n        if(stock.earningsPerShare) {\n            score += getScore(stock.dividendPayoutPercentage, scoringRules.dividendPayoutPercentage);\n            score += getScore(stock.dividendYieldPercentage, scoringRules.dividendYieldPercentage);\n            score += getScore(stock.industryPercentage, scoringRules.industryPercentage);\n            score += getScore(stock.priceEarningsRatio, scoringRules.priceEarningsRatio);\n            score += getScore(stock.sectorPercentage, scoringRules.sectorPercentage);\n            score += getScore(stock.stockPercentage, scoringRules.stockPercentage);\n            // Summary Score is a special rule\n            score += getSummaryScore(stock);\n        }\n        return score;\n    }\n\n    const getSummaryScore = (stock) => {\n        let score = 0;\n        const weight = scoringRules.summaryScore.weight\n        switch (stock.summaryScore) {\n            case 'Very Bullish':\n                score += (weight*2)\n                break;\n            case 'Bullish':\n                score += weight\n                break;\n            case 'Bearish':\n                score -= weight\n                break;\n            case 'Very Bearish':\n                score -= (weight*2)\n                break;\n            default: // 'Neutral'\n        }\n        return score;\n    }\n\n    const splitCSVButIgnoreCommasInDoublequotes = (str) => {\n        //split the str first  \n        //then merge the elments between two double quotes  \n        let delimiter = ',';\n        let quotes = '\"';\n        let elements = str.split(delimiter);\n        let newElements = [];\n        for (let i = 0; i < elements.length; ++i) {\n            if (elements[i].indexOf(quotes) >= 0) {//the left double quotes is found  \n                let indexOfRightQuotes = -1;\n                let tmp = elements[i];\n                //find the right double quotes  \n                for (let j = i + 1; j < elements.length; ++j) {\n                    if (elements[j].indexOf(quotes) >= 0) {\n                        indexOfRightQuotes = j;\n                        break;\n                    }\n                }\n                //found the right double quotes  \n                //merge all the elements between double quotes  \n                if (-1 !== indexOfRightQuotes) {\n                    for (let k = i + 1; k <= indexOfRightQuotes; ++k) {\n                        tmp = tmp + delimiter + elements[k];\n                    }\n                    newElements.push(tmp);\n                    i = indexOfRightQuotes;\n                }\n                else { //right double quotes is not found  \n                    newElements.push(elements[i]);\n                }\n            }\n            else {//no left double quotes is found  \n                newElements.push(elements[i]);\n            }\n        }\n\n        return newElements;\n    }\n\n    const processScreener = (workbook) => {\n        if (portfolio.stocks.length === 0) {\n            toast.warn(`Portfolio overview must be imported first`, {\n                position: \"top-right\",\n                autoClose: 3000,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true\n            });\n            return;\n        }\n        portfolio = cloneDeep(portfolio);\n        portfolio.sectors = [];\n        let rows = XLSX.utils.sheet_to_row_object_array(workbook.Sheets['Search Criteria']);\n        for (let row of rows) {\n            // First missing company name ends the data portion of the file\n            const companyName = row['Company Name'];\n            if (!companyName) {\n                break;\n            }\n            // Merge in additional data if stock exists in portfolio\n            let stock = portfolio.stocks.find(s => s.symbol === row['Symbol']);\n            if (stock) {\n                // Only get important columns\n                stock.earningsPerShare = stock.lastPrice / row['P/E (Price/TTM Earnings)']; // lastPrice / PriceEarningsRatio\n                stock.summaryScore = row['Equity Summary Score from StarMine from Refinitiv'];\n                // Calculated fields\n                stock.priceEarningsRatio = stock.lastPrice / stock.earningsPerShare;\n            }\n        }\n        rows = XLSX.utils.sheet_to_row_object_array(workbook.Sheets['Basic Facts']);\n            for (let row of rows) {\n            // First missing company name ends the data portion of the file\n            const companyName = row['Company Name'];\n            if (!companyName) {\n                break;\n            }\n            // Merge in additional data if stock exists in portfolio\n            let stock = portfolio.stocks.find(s => s.symbol === row['Symbol']);\n            if (stock) {\n                // Only get important columns\n                stock.dividendPerShare = row['Dividend Yield'] * stock.lastPrice / 400; // dividendYield * lastPrice / 4 (quarterly payments)\n                stock.sector = row['Sector'];\n                stock.industry = row['Industry'];\n                // Calculated fields\n                stock.dividendPayoutPercentage = stock.dividendPerShare * 4 / stock.earningsPerShare;\n                stock.dividendYieldPercentage = stock.dividendPerShare * 4 / stock.lastPrice;\n                // Get sector and industry summations\n                let sector = portfolio.sectors.find(s => s.name === stock.sector);\n                if (sector) {\n                    sector.currentValue += stock.currentValue;\n                    let industry = sector.industries.find(i => i.name === stock.industry);\n                    if (industry) {\n                        industry.currentValue += stock.currentValue;\n                    } else {\n                        sector.industries.push({\n                            name: stock.industry,\n                            currentValue: stock.currentValue\n                        });\n                    }\n                } else {\n                    portfolio.sectors.push({\n                        name: stock.sector,\n                        currentValue: stock.currentValue,\n                        industries: [\n                            {\n                                name: stock.industry,\n                                currentValue: stock.currentValue\n                            }\n                        ]\n                    });\n                }\n            }\n        }\n        // Get portfolio summations\n        portfolio.currentValue = 0;\n        for (const stock of portfolio.stocks) {\n            portfolio.currentValue += stock.currentValue;\n        }\n        // Calculated fields now that all summations are complete\n        for (let stock of portfolio.stocks) {\n            stock.stockPercentage = stock.currentValue / portfolio.currentValue;\n            if (stock.sector) {\n                // Funds have no sector\n                let sector = portfolio.sectors.find(s => s.name === stock.sector);\n                let industry = sector.industries.find(i => i.name === stock.industry);\n                stock.sectorPercentage = sector.currentValue / portfolio.currentValue;\n                stock.industryPercentage = industry.currentValue / portfolio.currentValue;\n            }\n        }\n        dispatch(updatePortfolio(portfolio));\n        toast.success(`Screen data imported`, {\n            position: \"top-right\",\n            autoClose: 500,\n            hideProgressBar: false,\n            closeOnClick: false,\n            pauseOnHover: false,\n            draggable: false\n        });\n    }\n\n    const processPortfolioOverview = (rows) => {\n        // handle data processing of portfolio\n        let portfolio = {\n            currentValue: 0,\n            sectors: [],\n            stocks: []\n        }\n        for (let i = 1 /* skip header row */; i < rows.length; i++) {\n            var columns = splitCSVButIgnoreCommasInDoublequotes(rows[i]);\n            // First blank line ends the data portion of the file\n            if (columns[0] === '\\r') {\n                break;\n            }\n            const newStock = {\n                // Only get important columns\n                symbol: columns[1],\n                description: columns[2].split(\"USD\")[0].split(\" COM\")[0].split(\" CORP\")[0].split(\" INC\")[0], // Remove excess description\n                quantity: Number(columns[3].replace(/[$%\",]/g, '')),\n                lastPrice: Number(columns[4].replace(/[$%\",]/g, '')),\n                currentValue: Number(columns[6].replace(/[$%\",]/g, '')),\n                costBasis: Number(columns[12].replace(/[$%\",]/g, '')),\n            }\n            // Add or merge into array\n            let existingStock = portfolio.stocks.find(s => s.symbol === newStock.symbol);\n            if (existingStock) {\n                // Merge stocks together\n                existingStock.quantity += newStock.quantity;\n                existingStock.costBasis += newStock.costBasis;\n                existingStock.currentValue += newStock.currentValue;\n            } else {\n                // Add\n                portfolio.stocks.push(newStock);\n            }\n        }\n        portfolio.stocks.sort((a, b) => {\n            if (a.symbol < b.symbol) {\n                return -1;\n            }\n            if (b.symbol < a.symbol) {\n                return 1;\n            }\n            return 0;\n        });\n        dispatch(updatePortfolio(portfolio));\n        toast.success(`Portfolio data imported`, {\n            position: \"top-right\",\n            autoClose: 500,\n            hideProgressBar: false,\n            closeOnClick: false,\n            pauseOnHover: false,\n            draggable: false\n        });\n    }\n\n    // Event Handlers\n    const handleOnCloseRulesEditor = (event) => {\n        setShowRules(false);\n    }\n\n    const handleDataExport = (event) => {\n        let csv = 'Symbol,Score,Description,Sector,Industry,Last Price,Quantity,EPS,Dividend,Cost Basis,Current Value,Summary Score,P/E,Dividend Payout %,Dividend Yield %,Stock %,Sector %,Industry %\\n';\n        // Add each row of the table\n        for (const stock of portfolio.stocks) {\n            let score = getStockScore(stock);\n            csv += `${stock.symbol},${score},${stock.description},${stock.sector || ''},${stock.industry || ''},${forcePrecision(stock.lastPrice)},${forcePrecision(stock.quantity)},${forcePrecision(stock.earningsPerShare)},${forcePrecision(stock.dividendPerShare)},${forcePrecision(stock.costBasis)},${forcePrecision(stock.currentValue)},${stock.summaryScore || ''},${forcePrecision(stock.priceEarningsRatio)},${forcePrecision(stock.dividendPayoutPercentage)},${forcePrecision(stock.dividendYieldPercentage, 4)},${forcePrecision(stock.stockPercentage, 4)},${forcePrecision(stock.sectorPercentage, 4)},${forcePrecision(stock.industryPercentage, 4)}\\n`;\n        }\n        const blob = new Blob([csv], { type: 'text/plain' });\n        const href = URL.createObjectURL(blob);\n        const link = document.createElement('a');\n        link.href = href;\n        link.download = 'fidelity-portfolio.csv';\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n    }\n\n    const handleDataImport = (event) => {\n        if (!event.target.files || event.target.files.length !== 1) {\n            toast.error(`No file selected`, {\n                position: \"top-right\",\n                autoClose: 2000,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true\n            });\n            return;\n        }\n        let file = event.target.files[0]\n        const textReader = new FileReader();\n        const binaryStringReader = new FileReader();\n        textReader.onloadend = () => {\n            const rows = textReader.result.toString().split('\\n');\n            processPortfolioOverview(rows);\n        }\n        binaryStringReader.onload = () => {\n            const workbook = XLSX.read(binaryStringReader.result, { type: 'binary' });\n            processScreener(workbook);\n        }\n        if(file.name.indexOf(\".csv\") > 0 ) {\n            textReader.readAsText(file);\n        } else {\n            binaryStringReader.readAsBinaryString(file);\n        }\n    }\n\n    const handleOnRules = () => {\n        setShowRules(!showRules);\n    }\n\n    const handleOnUpdateRules = (values) => {\n        dispatch(updateScoringRules(values));\n        setShowRules(false);\n    }\n\n    const dispatch = useDispatch();\n    let portfolio = useSelector(selectorPortfolio);\n    let scoringRules = useSelector(selectorScoringRules);\n\n    return (\n        <div className={`container-fluid ${css.app}`}>\n            <div>\n                <label className=\"btn btn-info\" onChange={handleDataImport}>\n                    Import <input type=\"file\" multiple={false} accept=\".csv,.xls\" hidden />\n                </label>\n                &nbsp;\n                <label className=\"btn btn-info\" onClick={handleDataExport}>Export</label>\n            </div>\n            <GettingStarted stocks={portfolio.stocks}/>\n            {showRules ? <RulesEditor scoringRules={scoringRules} onClose={handleOnCloseRulesEditor} onSubmit={(values) => handleOnUpdateRules(values)}/> : null}\n            {portfolio.stocks.length > 0 ? <StockChart portfolio={portfolio} scoringRules={scoringRules} onRules={() => handleOnRules()}/> : null}\n        </div>\n    );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport appReducer from './appSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    app: appReducer,\r\n  },\r\n});\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './store';\nimport { Provider } from 'react-redux';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}