{"version":3,"sources":["app.module.css","components/RulesEditor.js","utilities.js","components/StockChart.js","appSlice.js","App.js","store.js","reportWebVitals.js","index.js"],"names":["module","exports","RulesEditor","props","useForm","mode","register","handleSubmit","className","onSubmit","values","scoringRules","dividendPayoutPercentage","highValueBetter","dividendPayoutPercentageHighValueBetter","min","Number","dividendPayoutPercentageMin","max","dividendPayoutPercentageMax","weight","dividendPayoutPercentageWeight","dividendYieldPercentage","dividendYieldPercentageHighValueBetter","dividendYieldPercentageMin","dividendYieldPercentageMax","dividendYieldPercentageWeight","industryPercentage","industryPercentageHighValueBetter","industryPercentageMin","industryPercentageMax","industryPercentageWeight","overallScore","overallScoreMin","overallScoreMax","priceEarningsRatio","priceEarningsRatioHighValueBetter","priceEarningsRatioMin","priceEarningsRatioMax","priceEarningsRatioWeight","sectorPercentage","sectorPercentageHighValueBetter","sectorPercentageMin","sectorPercentageMax","sectorPercentageWeight","stockPercentage","stockPercentageHighValueBetter","stockPercentageMin","stockPercentageMax","stockPercentageWeight","summaryScore","summaryScoreWeight","id","disabled","defaultValue","name","type","required","step","ref","value","utilities","filter","inputObjectArray","searchString","length","searchStringLower","toLowerCase","o","property","indexOf","guid","replace","c","r","Math","random","toString","isDate","call","test","jsonParseNumbers","inputObject","JSON","parse","k","v","isNaN","sort","propertyName","descending","a","b","aValue","bValue","Date","StockChart","useState","descendingSort","setDecendingSort","getScore","rule","score","handleSort","portfolio","stocks","onClick","onRules","map","stock","index","getSummaryScore","priceEarningsRatioScore","dividendPayoutPercentageScore","dividendYieldPercentageScore","stockPercentageScore","sectorPercentageScore","industryPercentageScore","earningsPerShare","symbol","description","sector","industry","lastPrice","toFixed","quantity","dividendPerShare","costBasis","currentValue","initialPortfolio","portfolioJson","localStorage","getItem","sectors","initialScoringRules","scoringRulesJson","appSlice","createSlice","initialState","reducers","updatePortfolio","state","action","payload","setItem","stringify","updateScoringRules","actions","selectorPortfolio","app","selectorScoringRules","App","showRules","setShowRules","toast","configure","forcePrecision","num","precision","getStockScore","splitCSVButIgnoreCommasInDoublequotes","str","elements","split","newElements","i","indexOfRightQuotes","tmp","j","push","dispatch","useDispatch","useSelector","css","onChange","event","target","files","reader","FileReader","onloadend","rows","result","substring","columns","newStock","existingStock","find","s","console","log","processPortfolioOverview","warn","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","cloneDeep","processScreenerResultsSearchCriteria","industries","processScreenerResultsBasicFacts","success","readAsText","error","multiple","accept","hidden","csv","blob","Blob","href","URL","createObjectURL","link","document","createElement","download","body","appendChild","click","removeChild","handleOnUpdateRules","configureStore","reducer","appReducer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","store","getElementById"],"mappings":"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","file":"static/js/main.d4a0032f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"app_app__3Pene\"};","import React from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nimport './RulesEditor.css'\r\n\r\nconst RulesEditor = (props) => {\r\n\r\n    const { register, handleSubmit } = useForm({ mode: 'onBlur' });\r\n\r\n    const handleFormSubmit = (values) => {\r\n        // Values are the actual form fields that use ref={register()}\r\n        const scoringRules = {\r\n            dividendPayoutPercentage: { highValueBetter: values.dividendPayoutPercentageHighValueBetter === 'true', min: Number(values.dividendPayoutPercentageMin), max: Number(values.dividendPayoutPercentageMax), weight: Number(values.dividendPayoutPercentageWeight) },\r\n            dividendYieldPercentage: { highValueBetter: values.dividendYieldPercentageHighValueBetter === 'true', min: Number(values.dividendYieldPercentageMin), max: Number(values.dividendYieldPercentageMax), weight: Number(values.dividendYieldPercentageWeight) },\r\n            industryPercentage: { highValueBetter: values.industryPercentageHighValueBetter === 'true', min: Number(values.industryPercentageMin), max: Number(values.industryPercentageMax), weight: Number(values.industryPercentageWeight) },\r\n            overallScore: { highValueBetter: true, min: Number(values.overallScoreMin), max: Number(values.overallScoreMax) }, // Summation of all the other scores with min/max used only for highlighting chart\r\n            priceEarningsRatio: { highValueBetter: values.priceEarningsRatioHighValueBetter === 'true', min: Number(values.priceEarningsRatioMin), max: Number(values.priceEarningsRatioMax), weight: Number(values.priceEarningsRatioWeight) },\r\n            sectorPercentage: { highValueBetter: values.sectorPercentageHighValueBetter === 'true', min: Number(values.sectorPercentageMin), max: Number(values.sectorPercentageMax), weight: Number(values.sectorPercentageWeight) },\r\n            stockPercentage: { highValueBetter: values.stockPercentageHighValueBetter === 'true', min: Number(values.stockPercentageMin), max: Number(values.stockPercentageMax), weight: Number(values.stockPercentageWeight) },\r\n            summaryScore: { weight: Number(values.summaryScoreWeight) } // Neutral will be 0 and each rating above adds 'weight' and below subtracts 'weight'\r\n        }\r\n        props.onSubmit(scoringRules);\r\n    }\r\n\r\n    return (\r\n        <div className=\"rules-editor \">\r\n            <div className=\"card\">\r\n                <div className=\"card-heading bg-dark text-light d-flex p-2\">\r\n                    Rules Editor\r\n                </div>\r\n                <div className=\"card-body\">\r\n                    The stock portfolio table will highlight cells below the minimum or above the maximum values enmtered here, scoring them based on the weight given. Scoring will be positive 'Weight' value if the direction is set to 'High' and above 'Max', or negative if below the 'Min'.  Scoring will be negative 'Weight' value if the direction is set to 'Low' and above the 'Max', or positive if below the 'Min'.<br/>\r\n                    <br/>\r\n                    <form onSubmit={handleSubmit(handleFormSubmit)}>\r\n                        <table id=\"stockTable\" className=\"table table-condensed table-striped table-hover font-size-small\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th className=\"name-column\">Rule Name</th>\r\n                                    <th>Min</th>\r\n                                    <th>Max</th>\r\n                                    <th>Direction</th>\r\n                                    <th>Weight</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td>Summary Score</td>\r\n                                    <td><input className=\"form-control\" disabled defaultValue=\"N/A\"/></td>\r\n                                    <td><input className=\"form-control\" disabled defaultValue=\"N/A\"/></td>\r\n                                    <td><input className=\"form-control\" disabled defaultValue=\"N/A\"/></td>\r\n                                    <td>\r\n                                        <input className=\"form-control\" name=\"summaryScoreWeight\" type=\"number\" defaultValue={props.scoringRules.summaryScore.weight} min=\"0\" max=\"100\" required step=\"1\" ref={register()}/>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Price / Earnings Ratio (P/E)</td>\r\n                                    <td><input className=\"form-control\" name=\"priceEarningsRatioMin\" type=\"number\" defaultValue={props.scoringRules.priceEarningsRatio.min} min=\"1\" max=\"100\" required step=\"0.1\" ref={register()}/></td>\r\n                                    <td><input className=\"form-control\" name=\"priceEarningsRatioMax\" type=\"number\" defaultValue={props.scoringRules.priceEarningsRatio.max} min=\"1\" max=\"100\" required step=\"0.1\" ref={register()}/></td>\r\n                                    <td>\r\n                                        <select className=\"form-control\" name=\"priceEarningsRatioHighValueBetter\" defaultValue={props.scoringRules.priceEarningsRatio.highValueBetter} ref={register()}>\r\n                                            <option value='true'>High</option>\r\n                                            <option value='false'>Low</option>\r\n                                        </select>\r\n                                    </td>\r\n                                    <td><input className=\"form-control\" name=\"priceEarningsRatioWeight\" type=\"number\" defaultValue={props.scoringRules.priceEarningsRatio.weight} min=\"0\" max=\"100\" required step=\"1\" ref={register()}/></td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Dividend Payout Percentage</td>\r\n                                    <td><input className=\"form-control\" name=\"dividendPayoutPercentageMin\" type=\"number\" defaultValue={props.scoringRules.dividendPayoutPercentage.min} min=\"0.01\" max=\"1\" required step=\"0.01\" ref={register()}/></td>\r\n                                    <td><input className=\"form-control\" name=\"dividendPayoutPercentageMax\" type=\"number\" defaultValue={props.scoringRules.dividendPayoutPercentage.max} min=\"0.01\" max=\"1\" required step=\"0.01\" ref={register()}/></td>\r\n                                    <td>\r\n                                        <select className=\"form-control\" name=\"dividendPayoutPercentageHighValueBetter\" defaultValue={props.scoringRules.dividendPayoutPercentage.highValueBetter} ref={register()}>\r\n                                            <option value='true'>High</option>\r\n                                            <option value='false'>Low</option>\r\n                                        </select>\r\n                                    </td>\r\n                                    <td><input className=\"form-control\" name=\"dividendPayoutPercentageWeight\" type=\"number\" defaultValue={props.scoringRules.dividendPayoutPercentage.weight} min=\"0\" max=\"100\" required step=\"1\" ref={register()}/></td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Dividend Yield Percentage</td>\r\n                                    <td><input className=\"form-control\" name=\"dividendYieldPercentageMin\" type=\"number\" defaultValue={props.scoringRules.dividendYieldPercentage.min} min=\"0.001\" max=\"1\" required step=\"0.001\" ref={register()}/></td>\r\n                                    <td><input className=\"form-control\" name=\"dividendYieldPercentageMax\" type=\"number\" defaultValue={props.scoringRules.dividendYieldPercentage.max} min=\"0.001\" max=\"1\" required step=\"0.001\" ref={register()}/></td>\r\n                                    <td>\r\n                                        <select className=\"form-control\" name=\"dividendYieldPercentageHighValueBetter\" defaultValue={props.scoringRules.dividendYieldPercentage.highValueBetter} ref={register()}>\r\n                                            <option value='true'>High</option>\r\n                                            <option value='false'>Low</option>\r\n                                        </select>\r\n                                    </td>\r\n                                    <td><input className=\"form-control\" name=\"dividendYieldPercentageWeight\" type=\"number\" defaultValue={props.scoringRules.dividendYieldPercentage.weight} min=\"0\" max=\"100\" required step=\"1\" ref={register()}/></td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Stock Percentage</td>\r\n                                    <td><input className=\"form-control\" name=\"stockPercentageMin\" type=\"number\" defaultValue={props.scoringRules.stockPercentage.min} min=\"0.001\" max=\"1\" required step=\"0.001\" ref={register()}/></td>\r\n                                    <td><input className=\"form-control\" name=\"stockPercentageMax\" type=\"number\" defaultValue={props.scoringRules.stockPercentage.max} min=\"0.001\" max=\"1\" required step=\"0.001\" ref={register()}/></td>\r\n                                    <td>\r\n                                        <select className=\"form-control\" name=\"stockPercentageHighValueBetter\" defaultValue={props.scoringRules.stockPercentage.highValueBetter} ref={register()}>\r\n                                            <option value='true'>High</option>\r\n                                            <option value='false'>Low</option>\r\n                                        </select>\r\n                                    </td>\r\n                                    <td><input className=\"form-control\" name=\"stockPercentageWeight\" type=\"number\" defaultValue={props.scoringRules.stockPercentage.weight} min=\"0\" max=\"100\" required step=\"1\" ref={register()}/></td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Sector Percentage</td>\r\n                                    <td><input className=\"form-control\" name=\"sectorPercentageMin\" type=\"number\" defaultValue={props.scoringRules.sectorPercentage.min} min=\"0.01\" max=\"1\" required step=\"0.01\" ref={register()}/></td>\r\n                                    <td><input className=\"form-control\" name=\"sectorPercentageMax\" type=\"number\" defaultValue={props.scoringRules.sectorPercentage.max} min=\"0.01\" max=\"1\" required step=\"0.01\" ref={register()}/></td>\r\n                                    <td>\r\n                                        <select className=\"form-control\" name=\"sectorPercentageHighValueBetter\" defaultValue={props.scoringRules.sectorPercentage.highValueBetter} ref={register()}>\r\n                                            <option value='true'>High</option>\r\n                                            <option value='false'>Low</option>\r\n                                        </select>\r\n                                    </td>\r\n                                    <td><input className=\"form-control\" name=\"sectorPercentageWeight\" type=\"number\" defaultValue={props.scoringRules.sectorPercentage.weight} min=\"0\" max=\"100\" required step=\"1\" ref={register()}/></td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Industry Percentage</td>\r\n                                    <td><input className=\"form-control\" name=\"industryPercentageMin\" type=\"number\" defaultValue={props.scoringRules.industryPercentage.min} min=\"0.001\" max=\"1\" required step=\"0.001\" ref={register()}/></td>\r\n                                    <td><input className=\"form-control\" name=\"industryPercentageMax\" type=\"number\" defaultValue={props.scoringRules.industryPercentage.max} min=\"0.001\" max=\"1\" required step=\"0.001\" ref={register()}/></td>\r\n                                    <td>\r\n                                        <select className=\"form-control\" name=\"industryPercentageHighValueBetter\" defaultValue={props.scoringRules.industryPercentage.highValueBetter} ref={register()}>\r\n                                            <option value='true'>High</option>\r\n                                            <option value='false'>Low</option>\r\n                                        </select>\r\n                                    </td>\r\n                                    <td><input className=\"form-control\" name=\"industryPercentageWeight\" type=\"number\" defaultValue={props.scoringRules.industryPercentage.weight} min=\"0\" max=\"100\" required step=\"1\" ref={register()}/></td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Overall Score</td>\r\n                                    <td><input className=\"form-control\" name=\"overallScoreMin\" type=\"number\" defaultValue={props.scoringRules.overallScore.min} min=\"0\" max=\"100\" required step=\"1\" ref={register()}/></td>\r\n                                    <td><input className=\"form-control\" name=\"overallScoreMax\" type=\"number\" defaultValue={props.scoringRules.overallScore.max} min=\"0\" max=\"100\" required step=\"1\" ref={register()}/></td>\r\n                                    <td><input className=\"form-control\" disabled defaultValue=\"N/A\"/></td>\r\n                                    <td><input className=\"form-control\" disabled defaultValue=\"N/A\"/></td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                        <button className=\"btn btn-success\" type=\"submit\"><span className=\"fa fa-check\"></span> Save</button>&nbsp;\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RulesEditor;\r\n","export let utilities = {\r\n    filter: (inputObjectArray, searchString) => {\r\n        // Filters any objects from the array where any of their properties contain the passed in search string\r\n        if (inputObjectArray != null && searchString != null && searchString.length > 0) {\r\n            const searchStringLower = searchString.toLowerCase();\r\n            return inputObjectArray.filter(o => {\r\n                for (const property in o) { // Look at each property\r\n                    if (typeof o[property] === 'string') {\r\n                        if (o[property].toLowerCase().indexOf(searchStringLower) !== -1) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                }\r\n                return false;\r\n            });\r\n        } else {\r\n            return inputObjectArray;\r\n        }\r\n    },\r\n    guid: () => {\r\n\t\treturn 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n            // eslint-disable-next-line\r\n\t\t\tconst r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);\r\n\t\t\treturn v.toString(16);\r\n\t\t});\r\n\t},\r\n    isDate: (value) => {\r\n        if(!value) {\r\n            return false;\r\n        }\r\n        var dateFormat;\r\n        if (toString.call(value) === '[object Date]') {\r\n            return true;\r\n        }\r\n        if (typeof value.replace === 'function') {\r\n            value.replace(/^\\s+|\\s+$/gm, '');\r\n        }\r\n        dateFormat = /(^\\d{1,4}[.|\\\\/|-]\\d{1,2}[.|\\\\/|-]\\d{1,4})(\\s*(?:0?[1-9]:[0-5]|1(?=[012])\\d:[0-5])\\d\\s*[ap]m)?$/;\r\n        return dateFormat.test(value);\r\n    },\r\n    jsonParseNumbers: (inputObject) => {\r\n        return JSON.parse(inputObject, (k, v) => {\r\n            if(typeof v === \"object\") {\r\n                return v;\r\n            } else {\r\n                return isNaN(v) ? v : Number(v);\r\n            }\r\n        });\r\n    },\r\n    sort: (inputObjectArray, propertyName, descending = false) => {\r\n        // Sort an array of objects (in place) by the value of a given propertyName either ascending (default) or descending\r\n        if (inputObjectArray && propertyName) {\r\n            inputObjectArray.sort((a, b) => {\r\n                let aValue = a[propertyName];\r\n                let bValue = b[propertyName];\r\n                // Check if strings are actually dates\r\n                if(utilities.isDate(aValue) && utilities.isDate(bValue)) {\r\n                    aValue = new Date(a[propertyName]);\r\n                    bValue = new Date(b[propertyName]);\r\n                }\r\n                if (aValue < bValue) {\r\n                    return descending ? 1 : -1;\r\n                }\r\n                if (bValue < aValue) {\r\n                    return descending ? -1 : 1;\r\n                }\r\n                return 0;\r\n            });\r\n        }\r\n    }\r\n}\r\n","import React, {useState} from 'react';\r\nimport { utilities } from './../utilities';\r\n\r\nimport './StockChart.css'\r\n\r\nconst StockChart = (props) => {\r\n\r\n    let [descendingSort, setDecendingSort] = useState(true);\r\n\r\n    const getScore = (value, rule) => {\r\n        let score = 0;\r\n        if(value) {\r\n            if (value > rule.max) {\r\n                if (rule.highValueBetter) {\r\n                    score = rule.weight;\r\n                } else {\r\n                    score = -rule.weight;\r\n                }\r\n            } else if (value < rule.min) {\r\n                if (rule.highValueBetter) {\r\n                    score = -rule.weight;\r\n                } else {\r\n                    score = rule.weight;\r\n                }\r\n            }\r\n        }\r\n        return score;\r\n    }\r\n\r\n    const getSummaryScore = (stock) => {\r\n        let score = 0;\r\n        const weight = props.scoringRules.summaryScore.weight\r\n        switch (stock.summaryScore) {\r\n            case 'Very Bullish':\r\n                score += (weight*2)\r\n                break;\r\n            case 'Bullish':\r\n                score += weight\r\n                break;\r\n            case 'Bearish':\r\n                score -= weight\r\n                break;\r\n            case 'Very Bearish':\r\n                score -= (weight*2)\r\n                break;\r\n            default: // 'Neutral'\r\n        }\r\n        return score;\r\n    }\r\n    \r\n    const handleSort = (propertyName) => {\r\n        setDecendingSort(!descendingSort);\r\n        utilities.sort(props.portfolio.stocks, propertyName, descendingSort);\r\n    }\r\n\r\n    return (\r\n        <div className=\"stock-chart\">\r\n            <div className=\"card\" id=\"chart\">\r\n                <div className=\"card-heading bg-dark text-light\">\r\n                    <button className='btn btn-secondary btn-rules' onClick={props.onRules}> Rules</button>\r\n                    <span>Stock Portfolio</span>\r\n                </div>\r\n                <div className=\"card-body\">\r\n                    <div className=\"table-responsive\">\r\n                        <table id=\"stockTable\" className=\"table table-condensed table-striped table-hover font-size-small\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th onClick={() => handleSort('symbol')}>Symbol</th>\r\n                                    <th onClick={() => handleSort('score')}>Score</th>\r\n                                    <th onClick={() => handleSort('description')}>Description</th>\r\n                                    <th onClick={() => handleSort('sector')}>Sector</th>\r\n                                    <th onClick={() => handleSort('industry')}>Industry</th>\r\n                                    <th onClick={() => handleSort('lastPrice')}>Last Price</th>\r\n                                    <th onClick={() => handleSort('quantity')}>Quantity</th>\r\n                                    <th onClick={() => handleSort('earningsPerShare')}>EPS</th>\r\n                                    <th onClick={() => handleSort('dividendPerShare')}>Dividend</th>\r\n                                    <th onClick={() => handleSort('costBasis')}>Cost Basis</th>\r\n                                    <th onClick={() => handleSort('currentValue')}>Current Value</th>\r\n                                    <th onClick={() => handleSort('summaryScore')}>Summary Score</th>\r\n                                    <th onClick={() => handleSort('priceEarningsRatio')}>P/E</th>\r\n                                    <th onClick={() => handleSort('dividendPayoutPercentage')}>Div Payout %</th>\r\n                                    <th onClick={() => handleSort('dividendYieldPercentage')}>Div Yield %</th>\r\n                                    <th onClick={() => handleSort('stockPercentage')}>Stock %</th>\r\n                                    <th onClick={() => handleSort('sectorPercentage')}>Sector %</th>\r\n                                    <th onClick={() => handleSort('industryPercentage')}>Industry %</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {props.portfolio.stocks.map((stock, index) => {\r\n                                    const summaryScore = getSummaryScore(stock);\r\n                                    const priceEarningsRatioScore = getScore(stock.priceEarningsRatio, props.scoringRules.priceEarningsRatio);\r\n                                    const dividendPayoutPercentageScore = getScore(stock.dividendPayoutPercentage, props.scoringRules.dividendPayoutPercentage);\r\n                                    const dividendYieldPercentageScore = getScore(stock.dividendYieldPercentage, props.scoringRules.dividendYieldPercentage);\r\n                                    const stockPercentageScore = getScore(stock.stockPercentage, props.scoringRules.stockPercentage);\r\n                                    const sectorPercentageScore = getScore(stock.sectorPercentage, props.scoringRules.sectorPercentage);\r\n                                    const industryPercentageScore = getScore(stock.industryPercentage, props.scoringRules.industryPercentage);\r\n                                    let score = 0\r\n                                    // Do not get an overall score unless we have earningsPerShare, as it is needed to calculate many of the important metrics\r\n                                    if(stock.earningsPerShare) {\r\n                                        score = summaryScore+priceEarningsRatioScore+dividendPayoutPercentageScore+dividendYieldPercentageScore+stockPercentageScore+sectorPercentageScore+industryPercentageScore;\r\n                                    }\r\n                                    return (\r\n                                        <tr key={index}>\r\n                                            <td>{stock.symbol}</td>\r\n                                            <td className={score > props.scoringRules.overallScore.max ? 'good-background' : score < props.scoringRules.overallScore.min ? 'bad-background' : null}>{score}</td>\r\n                                            <td>{stock.description}</td>\r\n                                            <td>{stock.sector ? stock.sector.replace(/[\"]/g, '') : null}</td>\r\n                                            <td>{stock.industry ? stock.industry.replace(/[\"]/g, '') : null}</td>\r\n                                            <td>${stock.lastPrice.toFixed(2)}</td>\r\n                                            <td>{stock.quantity}</td>\r\n                                            <td>{stock.earningsPerShare ? `$${stock.earningsPerShare.toFixed(2)}` : null}</td>\r\n                                            <td>{stock.dividendPerShare ? `$${stock.dividendPerShare.toFixed(2)}` : null}</td>\r\n                                            <td>{stock.costBasis ? `$${stock.costBasis.toFixed(2)}` : null}</td>\r\n                                            <td>{stock.currentValue ? `$${stock.currentValue.toFixed(2)}` : null}</td>\r\n                                            <td className={summaryScore > 0 ? 'good-background' : summaryScore < 0  ? 'bad-background' : null}>{stock.summaryScore}</td>\r\n                                            <td className={priceEarningsRatioScore > 0 ? 'good-background' : priceEarningsRatioScore < 0  ? 'bad-background' : null}>{stock.priceEarningsRatio ? stock.priceEarningsRatio.toFixed(2) : null}</td>\r\n                                            <td className={dividendPayoutPercentageScore > 0 ? 'good-background' : dividendPayoutPercentageScore < 0 ? 'bad-background' : null}>{stock.dividendPayoutPercentage ? (stock.dividendPayoutPercentage*100).toFixed(0) : null}</td>\r\n                                            <td className={dividendYieldPercentageScore > 0 ? 'good-background' : dividendYieldPercentageScore < 0 ? 'bad-background' : null}>{stock.dividendYieldPercentage ? (stock.dividendYieldPercentage*100).toFixed(2) : null}</td>\r\n                                            <td className={stockPercentageScore > 0 ? 'good-background' : stockPercentageScore < 0  ? 'bad-background' : null}>{stock.stockPercentage ? (stock.stockPercentage*100).toFixed(2) : null}</td>\r\n                                            <td className={sectorPercentageScore > 0 ? 'good-background' : sectorPercentageScore < 0  ? 'bad-background' : null}>{stock.sectorPercentage ? (stock.sectorPercentage*100).toFixed(2) : null}</td>\r\n                                            <td className={industryPercentageScore > 0 ? 'good-background' : industryPercentageScore < 0  ? 'bad-background' : null}>{stock.industryPercentage ? (stock.industryPercentage*100).toFixed(2) : null}</td>\r\n                                        </tr>\r\n                                    )\r\n                                })}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n                <div className=\"card-footer d-flex p-2 justify-content-around\">\r\n                    <span className=\"bad-text\">Orange denotes a negative score</span>\r\n                    <span className=\"good-text\">Blue denotes a positive score</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default StockChart;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\nimport { utilities } from './utilities';\r\n\r\n/*\r\nportfolio = {\r\n    currentValue: number,\r\n    sectors: [\r\n        {\r\n            name: string,\r\n            currentValue: number,\r\n            industries: [\r\n                {\r\n                    name: string,\r\n                    currentValue: number\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    stocks: [\r\n        {\r\n            costBasis: number,\r\n            currentValue: number,\r\n            description: string\r\n            dividendPerShare: number,\r\n            dividendRatio: number,\r\n            dividendYieldPercent: number,\r\n            earningsPerShare: number,\r\n            industry: string,\r\n            industryPercentage: number,\r\n            lastPrice: number,\r\n            priceEarningsRatio: number,\r\n            quantity: number,\r\n            score: number,\r\n            sector: string,\r\n            sectorPercentage: number,\r\n            stockPercentage: number,\r\n            summaryScore: string,\r\n            symbol: string\r\n        }\r\n    ]\r\n},\r\nscoringRules: {\r\n    dividendPayoutPercentage: { highValueBetter: boolean, min: number, max: number, weight: number },\r\n    dividendYieldPercentage { highValueBetter: boolean, min: number, max: number, weight: number },\r\n    industryPercentage: { highValueBetter: boolean, min: number, max: number, weight: number },\r\n    priceEarningsRatio: { highValueBetter: boolean, min: number, max: number, weight: number },\r\n    sectorPercentage: { highValueBetter: boolean, min: number, max: number, weight: number },\r\n    stockPercentage: { highValueBetter: boolean, min: number, max: number, weight: number },\r\n    summaryScore: { weight: number }, // Neutral will be 0 and each rating above adds 'weight' and below subtracts 'weight'\r\n}\r\n*/\r\n\r\n// Get initialState\r\nlet initialPortfolio = null;\r\nconst portfolioJson = localStorage.getItem('portfolio');\r\nif(portfolioJson) {\r\n    initialPortfolio = utilities.jsonParseNumbers(portfolioJson);\r\n} else {\r\n    initialPortfolio = {\r\n        currentValue: 0,\r\n        sectors: [],\r\n        stocks: []\r\n    };\r\n}\r\n\r\nlet initialScoringRules = null;\r\nconst scoringRulesJson = localStorage.getItem('scoringRules');\r\nif(scoringRulesJson) {\r\n    initialScoringRules = utilities.jsonParseNumbers(scoringRulesJson);\r\n} else {\r\n    initialScoringRules = {\r\n        dividendPayoutPercentage: { highValueBetter: false, min: 0.35, max: 0.6, weight: 2 },\r\n        dividendYieldPercentage: { highValueBetter: true, min: 0.015, max: 0.025, weight: 1 },\r\n        industryPercentage: { highValueBetter: false, min: 0.002, max: 0.008, weight: 1 },\r\n        overallScore: { highValueBetter: true, min: 0, max: 3 }, // Summation of all the other scores with min/max used only for highlighting chart\r\n        priceEarningsRatio: { highValueBetter: false, min: 16, max: 25, weight: 2 },\r\n        sectorPercentage: { highValueBetter: false, min: 0.02, max: 0.04, weight: 1 },\r\n        stockPercentage: { highValueBetter: false, min: 0.002, max: 0.005, weight: 1 },\r\n        summaryScore: { weight: 1 } // Neutral will be 0 and each rating above adds 'weight' and below subtracts 'weight'\r\n    };\r\n}\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////////\r\n// Use createAsyncThunk() if adding any async side effects to a reducer\r\n// https://redux-toolkit.js.org/api/createAsyncThunk\r\n////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\nexport const appSlice = createSlice({\r\n  name: 'app',\r\n  initialState: {\r\n    portfolio: initialPortfolio,\r\n    scoringRules: initialScoringRules\r\n  },\r\n  reducers: {\r\n    // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n    // doesn't actually mutate the state because it uses the Inner library,\r\n    // which detects changes to a \"draft state\" and produces a brand new\r\n    // immutable state based off those changes\r\n    updatePortfolio: (state, action) => {\r\n        // action must pass portfolio\r\n        state.portfolio = action.payload;\r\n        localStorage.setItem('portfolio', JSON.stringify(state.portfolio));\r\n    },\r\n    updateScoringRules: (state, action) => {\r\n        // action must pass scoringRules\r\n        state.scoringRules = action.payload;\r\n        localStorage.setItem('scoringRules', JSON.stringify(state.scoringRules));\r\n    },\r\n\r\n    // deleteStock: (state, action) => {\r\n    //     // action must pass stock\r\n    //     let stock = action.payload;\r\n    //     const stockIndex = state.portfolio.stocks.findIndex((s) => s.symbol===stock.symbol);\r\n    //     if(stockIndex !== -1) {                    \r\n    //         state.portfolio.stocks = state.portfolio.stocks.splice(stockIndex, 1);\r\n    //         localStorage.setItem('portfolio', JSON.stringify(state.portfolio));\r\n    //     }\r\n    // },\r\n    // insertStock: (state, action) => {\r\n    //     // action must pass stock\r\n    //     let stock = action.payload;\r\n    //     state.portfolio.stocks.push(stock);\r\n    //     utilities.sort(state.portfolio.stocks, 'symbol');\r\n    //     localStorage.setItem('portfolio', JSON.stringify(state.portfolio));\r\n    // },\r\n    // updateStock: (state, action) => {\r\n    //     // action must pass stock\r\n    //     let stock = action.payload;\r\n    //     const stockIndex = state.portfolio.stocks.findIndex((s) => s.symbol===stock.symbol);\r\n    //     if(stockIndex !== -1) {\r\n    //         state.portfolio.stocks[stockIndex] = stock;\r\n    //         localStorage.setItem('portfolio', JSON.stringify(state.portfolio));\r\n    //     }\r\n    // }\r\n  }\r\n});\r\n\r\nexport const {\r\n    updatePortfolio,\r\n    updateScoringRules\r\n    // deleteStock,\r\n    // insertStock,\r\n    // updateStock\r\n } = appSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\n// export const incrementAsync = amount => dispatch => {\r\n//   setTimeout(() => {\r\n//     dispatch(incrementByAmount(amount));\r\n//   }, 1000);\r\n// };\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectorPortfolio = state => state.app.portfolio;\r\nexport const selectorScoringRules = state => state.app.scoringRules;\r\n\r\nexport default appSlice.reducer;\r\n","import React, {useState} from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { cloneDeep } from 'lodash'\nimport { toast } from 'react-toastify' // Must be initialized in App.js (see https://github.com/fkhadra/react-toastify#usage)\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport css from './app.module.css';\n\nimport RulesEditor from './components/RulesEditor';\nimport StockChart from './components/StockChart';\n\nimport {\n    // Actions\n    updatePortfolio,\n    updateScoringRules,\n    // Selectors\n    selectorPortfolio,\n    selectorScoringRules\n} from './appSlice';\n\nconst App = () => {\n    let [showRules, setShowRules] = useState(false);\n\n    // Call it once in your app. At the root of your app is the best place\n    toast.configure();\n\n    const forcePrecision = (num, precision = 2) => num ? num.toFixed(precision) : '';\n\n    const getScore = (value, rule) => {\n        if(value) {\n            if (value > rule.max) {\n                if (rule.highValueBetter)\n                    return rule.weight;\n                return -rule.weight;\n            } else if (value < rule.min) {\n                if (rule.highValueBetter)\n                    return -rule.weight;\n                return rule.weight;\n            }\n        }\n        return 0;\n    }\n\n    const getStockScore = (stock) => {\n        let score = 0;\n        // Do not get an overall score unless we have earningsPerShare, as it is needed to calculate many of the important metrics\n        if(stock.earningsPerShare) {\n            score += getScore(stock.dividendPayoutPercentage, scoringRules.dividendPayoutPercentage);\n            score += getScore(stock.dividendYieldPercentage, scoringRules.dividendYieldPercentage);\n            score += getScore(stock.industryPercentage, scoringRules.industryPercentage);\n            score += getScore(stock.priceEarningsRatio, scoringRules.priceEarningsRatio);\n            score += getScore(stock.sectorPercentage, scoringRules.sectorPercentage);\n            score += getScore(stock.stockPercentage, scoringRules.stockPercentage);\n            // Summary Score is a special rule\n            score += getSummaryScore(stock);\n        }\n        return score;\n    }\n\n    const getSummaryScore = (stock) => {\n        let score = 0;\n        const weight = scoringRules.summaryScore.weight\n        switch (stock.summaryScore) {\n            case 'Very Bullish':\n                score += (weight*2)\n                break;\n            case 'Bullish':\n                score += weight\n                break;\n            case 'Bearish':\n                score -= weight\n                break;\n            case 'Very Bearish':\n                score -= (weight*2)\n                break;\n            default: // 'Neutral'\n        }\n        return score;\n    }\n\n    const splitCSVButIgnoreCommasInDoublequotes = (str) => {\n        //split the str first  \n        //then merge the elments between two double quotes  \n        let delimiter = ',';\n        let quotes = '\"';\n        let elements = str.split(delimiter);\n        let newElements = [];\n        for (let i = 0; i < elements.length; ++i) {\n            if (elements[i].indexOf(quotes) >= 0) {//the left double quotes is found  \n                let indexOfRightQuotes = -1;\n                let tmp = elements[i];\n                //find the right double quotes  \n                for (let j = i + 1; j < elements.length; ++j) {\n                    if (elements[j].indexOf(quotes) >= 0) {\n                        indexOfRightQuotes = j;\n                        break;\n                    }\n                }\n                //found the right double quotes  \n                //merge all the elements between double quotes  \n                if (-1 !== indexOfRightQuotes) {\n                    for (let k = i + 1; k <= indexOfRightQuotes; ++k) {\n                        tmp = tmp + delimiter + elements[k];\n                    }\n                    newElements.push(tmp);\n                    i = indexOfRightQuotes;\n                }\n                else { //right double quotes is not found  \n                    newElements.push(elements[i]);\n                }\n            }\n            else {//no left double quotes is found  \n                newElements.push(elements[i]);\n            }\n        }\n\n        return newElements;\n    }\n\n    const processScreenerResultsBasicFacts = (rows) => {\n        portfolio = cloneDeep(portfolio);\n        portfolio.sectors = [];\n        // Add new row data to stocks\n        for (let i = 1 /* skip header row */; i < rows.length; i++) {\n            var columns = splitCSVButIgnoreCommasInDoublequotes(rows[i]);\n            // First blank line ends the data portion of the file\n            let symbol = columns[0];\n            if (symbol === '\\r') {\n                break;\n            }\n            // Merge in additional data if stock exists in portfolio\n            let stock = portfolio.stocks.find(s => s.symbol === symbol);\n            if (stock) {\n                // Only get important columns\n                stock.sector = columns[7];\n                stock.industry = columns[8];\n                // Get sector and industry summations\n                let sector = portfolio.sectors.find(s => s.name === stock.sector);\n                if (sector) {\n                    sector.currentValue += stock.currentValue;\n                    let industry = sector.industries.find(i => i.name === stock.industry);\n                    if (industry) {\n                        industry.currentValue += stock.currentValue;\n                    } else {\n                        sector.industries.push({\n                            name: stock.industry,\n                            currentValue: stock.currentValue\n                        });\n                    }\n                } else {\n                    portfolio.sectors.push({\n                        name: stock.sector,\n                        currentValue: stock.currentValue,\n                        industries: [\n                            {\n                                name: stock.industry,\n                                currentValue: stock.currentValue\n                            }\n                        ]\n                    });\n                }\n            }\n        }\n        // Get portfolio summations\n        portfolio.currentValue = 0;\n        for (const stock of portfolio.stocks) {\n            portfolio.currentValue += stock.currentValue;\n        }\n        // Calculated fields now that all summations are complete\n        for (let stock of portfolio.stocks) {\n            stock.stockPercentage = stock.currentValue / portfolio.currentValue;\n            if (stock.sector) {\n                // Funds have no sector\n                let sector = portfolio.sectors.find(s => s.name === stock.sector);\n                let industry = sector.industries.find(i => i.name === stock.industry);\n                stock.sectorPercentage = sector.currentValue / portfolio.currentValue;\n                stock.industryPercentage = industry.currentValue / portfolio.currentValue;\n            }\n        }\n        dispatch(updatePortfolio(portfolio));\n    }\n\n    const processScreenerResultsSearchCriteria = (rows) => {\n        portfolio = cloneDeep(portfolio);\n        for (let i = 1 /* skip header row */; i < rows.length; i++) {\n            var columns = splitCSVButIgnoreCommasInDoublequotes(rows[i]);\n            // First blank line ends the data portion of the file\n            const symbol = columns[0];\n            if (symbol === '\\r') {\n                break;\n            }\n            // Merge in additional data if stock exists in portfolio\n            let stock = portfolio.stocks.find(s => s.symbol === symbol);\n            if (stock) {\n                // Only get important columns\n                stock.earningsPerShare = stock.lastPrice / Number(columns[5].replace(/[$%\",]/g, '')); // lastPrice / PriceEarningsRatio\n                stock.dividendPerShare = (Number(columns[4].replace(/[$%\",]/g, '')) * stock.lastPrice / 400); // dividendYield * lastPrice / 4 (quarterly payments)\n                stock.summaryScore = columns[7];\n                // Calculated fields\n                stock.priceEarningsRatio = stock.lastPrice / stock.earningsPerShare;\n                stock.dividendPayoutPercentage = stock.dividendPerShare * 4 / stock.earningsPerShare;\n                stock.dividendYieldPercentage = stock.dividendPerShare * 4 / stock.lastPrice;\n            }\n        }\n        dispatch(updatePortfolio(portfolio));\n    }\n\n    const processPortfolioOverview = (rows) => {\n        let portfolio = {\n            currentValue: 0,\n            sectors: [],\n            stocks: []\n        }\n        for (let i = 1 /* skip header row */; i < rows.length; i++) {\n            var columns = splitCSVButIgnoreCommasInDoublequotes(rows[i]);\n            // First blank line ends the data portion of the file\n            if (columns[0] === '\\r') {\n                break;\n            }\n            const newStock = {\n                // Only get important columns\n                symbol: columns[1],\n                description: columns[2].split(\"USD\")[0].split(\" COM\")[0].split(\" CORP\")[0].split(\" INC\")[0], // Remove excess description\n                quantity: Number(columns[3].replace(/[$%\",]/g, '')),\n                lastPrice: Number(columns[4].replace(/[$%\",]/g, '')),\n                currentValue: Number(columns[6].replace(/[$%\",]/g, '')),\n                costBasis: Number(columns[12].replace(/[$%\",]/g, '')),\n            }\n            // Add or merge into array\n            let existingStock = portfolio.stocks.find(s => s.symbol === newStock.symbol);\n            if (existingStock) {\n                // Merge stocks together\n                existingStock.quantity += newStock.quantity;\n                existingStock.costBasis += newStock.costBasis;\n                existingStock.currentValue += newStock.currentValue;\n            } else {\n                // Add\n                portfolio.stocks.push(newStock);\n            }\n        }\n        portfolio.stocks.sort((a, b) => {\n            if (a.symbol < b.symbol) {\n                return -1;\n            }\n            if (b.symbol < a.symbol) {\n                return 1;\n            }\n            return 0;\n        });\n        //setPortfolio(portfolio);\n        console.log(portfolio);\n        dispatch(updatePortfolio(portfolio));\n    }\n\n    // Event Handlers\n    const handleDataExport = (event) => {\n        let csv = 'Symbol,Score,Description,Sector,Industry,Last Price,Quantity,EPS,Dividend,Cost Basis,Current Value,Summary Score,P/E,Dividend Payout %,Dividend Yield %,Stock %,Sector %,Industry %\\n';\n        // Add each row of the table\n        for (const stock of portfolio.stocks) {\n            let score = getStockScore(stock);\n            csv += `${stock.symbol},${score},${stock.description},${stock.sector || ''},${stock.industry || ''},${forcePrecision(stock.lastPrice)},${forcePrecision(stock.quantity)},${forcePrecision(stock.earningsPerShare)},${forcePrecision(stock.dividendPerShare)},${forcePrecision(stock.costBasis)},${forcePrecision(stock.currentValue)},${stock.summaryScore || ''},${forcePrecision(stock.priceEarningsRatio)},${forcePrecision(stock.dividendPayoutPercentage)},${forcePrecision(stock.dividendYieldPercentage, 4)},${forcePrecision(stock.stockPercentage, 4)},${forcePrecision(stock.sectorPercentage, 4)},${forcePrecision(stock.industryPercentage, 4)}\\n`;\n        }\n        const blob = new Blob([csv], { type: 'text/plain' });\n        const href = URL.createObjectURL(blob);\n        const link = document.createElement('a');\n        link.href = href;\n        link.download = 'fidelity-portfolio.csv';\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n    }\n\n    const handleDataImport = (event) => {\n        if (!event.target.files || event.target.files.length !== 1) {\n            toast.error(`No file selected`, {\n                position: \"top-right\",\n                autoClose: 2000,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true\n            });\n            return;\n        }\n        const reader = new FileReader();\n        reader.onloadend = () => {\n            // handle data processing\n            const rows = reader.result.toString().split('\\n');\n            // Check to see what type of file was imported based off its header\n            if (rows[0].substring(0, 12) === 'Account Name') {\n                processPortfolioOverview(rows);\n            } else {\n                if (portfolio.stocks.length === 0) {\n                    toast.warn(`Portfolio overview must be imported first`, {\n                        position: \"top-right\",\n                        autoClose: 3000,\n                        hideProgressBar: false,\n                        closeOnClick: true,\n                        pauseOnHover: true,\n                        draggable: true\n                    });\n                    return;\n                }\n                if (rows[0].substring(0, 33) === 'Symbol,Company Name,Security Type') {\n                    processScreenerResultsSearchCriteria(rows);\n                } else if (rows[0].substring(0, 34) === 'Symbol,Company Name,Security Price') {\n                    processScreenerResultsBasicFacts(rows);\n                }\n            }\n            toast.success(`File imported`, {\n                position: \"top-right\",\n                autoClose: 500,\n                hideProgressBar: false,\n                closeOnClick: false,\n                pauseOnHover: false,\n                draggable: false\n            });\n        }\n        reader.readAsText(event.target.files[0]);\n    }\n\n    const handleOnRules = () => {\n        setShowRules(!showRules);\n    }\n\n    const handleOnUpdateRules = (values) => {\n        dispatch(updateScoringRules(values));\n        setShowRules(false);\n    }\n\n    const dispatch = useDispatch();\n    let portfolio = useSelector(selectorPortfolio);\n    let scoringRules = useSelector(selectorScoringRules);\n\n    return (\n        <div className={`container-fluid ${css.app}`}>\n            <div>\n                <label className=\"btn btn-info\" onChange={handleDataImport}>\n                    Import <input type=\"file\" multiple={false} accept=\".csv\" hidden />\n                </label>\n                &nbsp;\n                <label className=\"btn btn-info\" onClick={handleDataExport}>Export</label>\n            </div>\n            {showRules ? <RulesEditor scoringRules={scoringRules} onSubmit={(values) => handleOnUpdateRules(values)}/> : null}\n            {portfolio.stocks.length > 0 ? <StockChart portfolio={portfolio} scoringRules={scoringRules} onRules={() => handleOnRules()}/> : null}\n        </div>\n    );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport appReducer from './appSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    app: appReducer,\r\n  },\r\n});\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './store';\nimport { Provider } from 'react-redux';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}